*prv.txt*  multidisciplinary research and development in Vim, version 0.01a 

                        PRV is Python, RDF and Vim

==============================================================================
CONTENTS                                                            *prv-index*
                           *prv*

    1. Intro                                    |prv-intro|
                                                  |prv-plugins|
        1.1. Python, RDF and Vim                |PRV|
        1.2. Usage examples                     |prv-usage-examples|
        1.3. |prv| help                           |prv-helphelp|
             |prv-help-cheatsheet|, |prv-cheatsheet|

    2. Install                                  |prv-install|
             |prv-install-recommended|  |prv-install-Vimball|
             |prv-install-root|  |prv-prv|

    3. Options, variables and general settings  |prv-settings|
                                                |prv-options|
             |prv_g:prv|  |prv-leaders|  |prv_leader|  |prv_localleader| 
             |prv-hack-settings|

    4. Mappings                                 |prv-mappings|

    5. Commands                                 |prv-commands|
             |prv-main-commands|  |prv-util-commands|

    6. Functions                                |prv-functions|
             |prv-implementation|

    7. Files                                    |prv-files|
             |prv.vim|  |prv.txt|

    8. Final words                              |prv-final-words|
        8.1. Advantages and drawbacks of |prv|     |prv-compare|
        8.2. Further work / Todo                |prv-todo|
        8.4. Disclaimer                         |prv-disclaimer|
        8.5. License                            |prv-license|
        8.6. Acknowledgements                   |prv-ack|
        8.7. Contact                            |prv-contact|


==============================================================================
1. Intro                                                       *prv-intro*
                                                               *prv-plugins*

PRV is a package, which currently consists of these plugins:
* |prv|, the core: navigation strategies of files, tags and Vim interface.
* |aa|, algorithmic autoregulation: periodic note-taking for dedication
  tracking.
* |realcolors|, 24 bit true color for Vim: on-the-fly tweak your color scheme,
  with persistence and facilities to harness your color settings.
* |tokipona|, for the minimalist conlang Toki Pona: analyses and syntheses
  of texts and of the language itself.
* |bot|, provides interfaces for training populations of bots, for defining corpus and criteria of interest, for talking with the bots, and for obtaining texts from the bots (such as poems and articles).

The long-term goal of |PRV| is to feedback computational intelligence into writting of code and articles.  See Vim ouroboros in [1].  See |prv-intelligence|

See |prv-todo|

------------------------------------------------------------------------------
1.1. Python, RDF and Vim                                             *PRV*

Harnessing the textual representation of routines and data,
through persistence and selected consideration of excepts,
is exploited in |PRV| by means of Python, RDF, and Vim.
See |prv-python|, |prv-rdf|, and |prv-vim|

One fundamental feature is a periodic interaction with
the |bot|, for note-taking, enriching ongoing work with
reference literature, or interweaving with own dedication
by means of previously taken notes, to which |aa| is dedicated.

Another fundamental feature of |PRV| is a clear strategy
to harness the Wiki and Unix design of hyperlinked text files.
Navigating filenames yield by tokens in the files
is faster, cleaner, and isomorphic to the wiki-like links
such as [[something]], which can be written as something, .something,
../something, something.wiki, or as convenient for the use
and meaning intended.
This is not a trivial issue while not expressed as in |prv-wiki|.


------------------------------------------------------------------------------
                                                              *prv-navigation*

C-hjkl for windows in any mode
A-ad for tabs in any mode (nope. A-a is useful in insert)
\b\B to open the browser in current dir
a-b a-B open close Sex in same dir.

------------------------------------------------------------------------------
                                                                    *prv-wiki*
                                                               *bare-vim-wiki*

The bare Vim should yield a very simple and functional system:
* use Vim's standard tagging mechanisms.
  Tags have to be extracted from the source files, and organized, in order to
  enable the navigation of tags. See |prv-tags-navigation|
* use Vim's standard file navigation mechanisms.  File navigation is always
  enabled.  Beyond absolute and relative paths, one might enable directories
  in 'path' for files to be searched for.  See |prv-file-navigation|

Long term goals are:
* exploit deeply the concept of a "reactwiki": hypertexts with executable
  code.
* exploit deeply the concept of 'Vim as an aplication platform' (described in |calendar.vim|).
* integrate with |aa| and the rest of PRV.  See |aa-related-plugins|

Other characteristics:
* it might be condensed in just a handful of standard Vim settings
  with optional advanced functions
* it should be very friendly to making collage of files to render, e.g. a
  latex or HTML file (pandoc? middleman? vimwiki?).
* Git versioning
* optional integration: calendar.vim, gmail.vim

                                                            *prv-tags-navigation*
* list of directory patterns to make the tags file
* keep 'tags' option with all the tags files generated
  * only one? yes. see :h user_29 / ONE TAGS FILE
  * generate many tags files for different projects/file trees? No, see above
* use tnext, tselect to handle multiple matches of c-[

See |tagsrch.txt|

                                                            *prv-file-navigation*
* use |gf|, [f, ]f, ^Wf, |:find|, |:sfind|, |:tabfind| etc (which other commands?), to follow pages
  i.e. entries (verbetes/termos para artigos e notas)
* use a directories in 'path' as wiki roots,  
* use .wiki, .md and .markdown as extensions (and e.g. *.mwiki?)
* use 'includeexpr' for further search when file is not found
* write token or word with starting / or . if internal link intended,
  but any word might be followed to the corresponding file.

* set what are the file chars in option 'isf'
* set the directories of the wikis in 'path'
* add wiki and md as prefixes in option 'sua'
* manage to link paths of wiki pages and of repository trees.
  E.g. .py files use a specific &path, .vim files, other &path etc...

See 'path'
                                                            *prv-help-navigation*
* reuse Vim's capabilities with help files and (parallel help files?) with
  tags and searching (and what more?).

                                                     *prv-vimwiki-considerations*
* Vimwiki ? standard setting suffice. VS help files VS bare markdown or Media wiki
* If the markdown syntax chosen is Vimwiki syntax compatible, it will be possible
  to convert the wiki to HTML with Vimwiki's routines.
* Ok that Vim navigates through paths, tokens might be marked with standard OS notation
  (e.g. ./myterm), and that most important files might be reached with
  uppercase markers.
* Vimwiki is still useful in the headings mappings, and manipulating lists.
* Vimwiki tables are not used by me. Maybe I need to experiment with them.

                                                     *prv-fzf*
------------------------------------------------------------------------------
                                                                    *prv-todo*

* make wiki ok:
  - read about tags, take notes and define strategy
  - read about file navigation, notes and strategy
  - migrate all wiki notes and other notes to the framework
* make mappings ok:
  - insert should use alt only when not useful if alt==esc.
  - revise them
* revise mappings, commands and mappings and add them to this document.
* publish to vim.org
* Assimilate the aux/experimentalStuff.vim file
* clean .vim/aux vimball stuff
* make bot

Consider |PRV| masks to:
* Social, percolation, participation, etc, Python packges.
* MASS, music
* complex networks
* rendering of imagens and animations
* computational intelligence facilities:
  - start with the vim bot.
    make bigrams and trigrams with aa shouts.
    and with other literature, to mix as convenient.
    make him talk using words in what you say to him.
    make the bot return info about the corpus, e.g. aa shouts.
    the bot gives the aa info window.
    name: lalenia? many names?
    make the bot use dbpedia and other linked data.
    distinguish or not between english and portuguese.
  - add interfaces to ic algorithms published as Python packages.

 vim:ma:noro:tw=78:ts=8:ft=help:sua+=.txt:norl:sts=4:sw=4:et:
